/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Sport as PrismaSport,
  Article as PrismaArticle,
} from "@prisma/client";

export class SportServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SportCountArgs, "select">): Promise<number> {
    return this.prisma.sport.count(args);
  }

  async sports(args: Prisma.SportFindManyArgs): Promise<PrismaSport[]> {
    return this.prisma.sport.findMany(args);
  }
  async sport(args: Prisma.SportFindUniqueArgs): Promise<PrismaSport | null> {
    return this.prisma.sport.findUnique(args);
  }
  async createSport(args: Prisma.SportCreateArgs): Promise<PrismaSport> {
    return this.prisma.sport.create(args);
  }
  async updateSport(args: Prisma.SportUpdateArgs): Promise<PrismaSport> {
    return this.prisma.sport.update(args);
  }
  async deleteSport(args: Prisma.SportDeleteArgs): Promise<PrismaSport> {
    return this.prisma.sport.delete(args);
  }

  async findArticles(
    parentId: string,
    args: Prisma.ArticleFindManyArgs
  ): Promise<PrismaArticle[]> {
    return this.prisma.sport
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .articles(args);
  }
}
